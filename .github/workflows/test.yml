# Terraform Provider testing workflow.
name: Tests

on:
  pull_request:
    branches:
      - "main"
    paths-ignore:
      - "README.md"

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read
  pull-requests: read # Optional for golangci-lint

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"
          cache: true
      - run: go mod download
      - run: go build -v .
      - name: Run linters
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest

  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"
          cache: true
      # We need the latest version of Terraform for documentation generation
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false
          terraform_version: latest
      - run: make generate
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'make generate' command and commit."; exit 1)

  # Run acceptance tests in a matrix with OpenTofu CLI versions
  test_opentofu:
    name: Acceptance Tests (OpenTofu)
    needs: build
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        opentofu:
          - "1.9.*"
        postgresql_container_build_context:
          - docker/postgres17

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"
          cache: true
      - uses: opentofu/setup-opentofu@592200bd4b9bbf4772ace78f887668b1aee8f716 # v1.0.5
        with:
          tofu_version: ${{ matrix.opentofu }}
          tofu_wrapper: false
      - run: go mod download

      - name: Install podman and podman-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y podman python3-pip
          pip3 install podman-compose==1.3.0

      - name: Start Postgres using podman-compose
        env:
          PG_CONTAINER_BUILD_CONTEXT: ${{ matrix.postgresql_container_build_context }}
        run: podman-compose up postgres -d

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            if podman exec $(podman ps -qf "name=postgres") pg_isready -U terraform_user -d terraform_test; then
             echo "Postgres is ready!"
             exit 0
            fi
            echo "Waiting for Postgres to be ready... ($i/10)"
            sleep 5
          done
          echo "Postgres did not become ready in time!" >&2
          exit 1

      - env:
          TF_ACC_PROVIDER_HOST: "registry.opentofu.org"
        run: TF_ACC_TERRAFORM_PATH=$(which tofu) make testacc
        timeout-minutes: 10

      - name: Stop services spun up by podman-compose
        run: podman-compose down

  # Run acceptance tests in a matrix with Terraform CLI versions
  test_terraform:
    name: Acceptance Tests (Terraform)
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        terraform:
          - "1.5.*"
          - "1.11.*"
        postgresql_container_build_context:
          #  - docker/postgres12
          #  - docker/postgres15
          - docker/postgres17

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: "go.mod"
          cache: true
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false
      - run: go mod download

      - name: Install podman and podman-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y podman python3-pip
          pip3 install podman-compose==1.3.0

      - name: Start Postgres using podman-compose
        env:
          PG_CONTAINER_BUILD_CONTEXT: ${{ matrix.postgresql_container_build_context }}
        run: podman-compose up  -d

      - name: Wait for Postgres to be ready
        run: |
          for i in {1..10}; do
            if podman exec $(podman ps -qf "name=postgres") pg_isready -U terraform_user -d terraform_test; then
             echo "Postgres is ready!"
             exit 0
            fi
            echo "Waiting for Postgres to be ready... ($i/10)"
            sleep 5
          done
          echo "Postgres did not become ready in time!" >&2
          exit 1

      - run: make testacc
        timeout-minutes: 10

      - name: Stop services spun up by podman-compose
        run: podman-compose down
